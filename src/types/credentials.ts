
/**
 * @fileOverview Defines types related to managed credentials.
 */

export type CredentialKind = 'api_key' | 'oauth2_token' | 'basic_auth' | 'generic_secret';

export interface ManagedCredential {
  id: string; // UUID, generated by the system
  name: string; // User-defined friendly name, e.g., "My OpenAI API Key"
  serviceName?: string; // Optional: e.g., "OpenAI", "Google Calendar", "Stripe" - for UI grouping/icons
  kind: CredentialKind;
  
  // Store encrypted values. The actual value is never stored in plain text.
  // For 'api_key', 'generic_secret':
  encryptedSecret?: string; 
  // For 'basic_auth':
  encryptedUsername?: string;
  encryptedPassword?: string; 
  // For 'oauth2_token':
  encryptedRefreshToken?: string;
  encryptedAccessToken?: string; 
  accessTokenExpiresAt?: string; // ISO Date string
  scopes?: string[]; // For OAuth2

  // Metadata
  userId?: string; // To associate with a user if multi-tenancy is introduced
  createdAt: string; // ISO Date string
  updatedAt: string; // ISO Date string
  description?: string; // Optional user description
}

// Example of how a credential might be stored or retrieved (unencrypted for client-side display only)
// NEVER store unencrypted secrets persistently.
export interface DisplayCredential extends Omit<ManagedCredential, 
  'encryptedSecret' | 
  'encryptedUsername' | 
  'encryptedPassword' | 
  'encryptedRefreshToken' | 
  'encryptedAccessToken'
> {
  // Placeholder for where value might be shown if needed (e.g., first/last few chars of API key)
  // Or more likely, this is just for metadata display and value is never shown.
  hasValue?: boolean; // Indicates if a secret is set, without revealing it.
}
